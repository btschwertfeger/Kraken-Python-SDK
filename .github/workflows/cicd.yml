name: CI/CD

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

concurrency:
  group: CICD-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8
          python -m pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Install package
        run: python setup.py install

  test:
    name: Test
    needs: [build]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 1 # to avoid failing tests because of API Rate limits
      matrix:
        os: [ubuntu-latest] #, macos-latest, windows-latest]
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest
          python -m pip install -r requirements.txt

      - name: Install package
        run: python setup.py install

      - name: Testing Spot REST endpoints
        env:
          SPOT_API_KEY: ${{ secrets.SPOT_API_KEY }}
          SPOT_SECRET_KEY: ${{ secrets.SPOT_SECRET_KEY }}
        run: |
          pytest tests/test_spot_rest.py

      - name: Testing Spot websocket client
        env:
          SPOT_API_KEY: ${{ secrets.SPOT_API_KEY }}
          SPOT_SECRET_KEY: ${{ secrets.SPOT_SECRET_KEY }}
        run: |
          pytest tests/test_spot_websocket.py

      - name: Testing Futures REST endpoints
        env:
          FUTURES_API_KEY: ${{ secrets.FUTURES_API_KEY }}
          FUTURES_SECRET_KEY: ${{ secrets.FUTURES_SECRET_KEY }}
          FUTURES_SANDBOX_KEY: ${{ secrets.FUTURES_SANDBOX_KEY }}
          FUTURES_SANDBOX_SECRET: ${{ secrets.FUTURES_SANDBOX_SECRET }}
        run: |
          pytest tests/test_futures_rest.py

      - name: Testing Futures websocket client
        env:
          FUTURES_API_KEY: ${{ secrets.FUTURES_API_KEY }}
          FUTURES_SECRET_KEY: ${{ secrets.FUTURES_SECRET_KEY }}
          FUTURES_SANDBOX_KEY: ${{ secrets.FUTURES_SANDBOX_KEY }}
          FUTURES_SANDBOX_SECRET: ${{ secrets.FUTURES_SANDBOX_SECRET }}
        run: |
          pytest tests/test_futures_websocket.py

  codecov:
    name: Coverage
    needs: [test]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 1 # to avoid failing tests because of API Rate limits
      matrix:
        os: [ubuntu-latest] #, macos-latest, windows-latest]
        python-version: ["3.11"]

    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest
          python -m pip install -r requirements.txt

      - name: Install package
        run: python setup.py install

      - name: Generate coverage report
        env:
            SPOT_API_KEY: ${{ secrets.SPOT_API_KEY }}
            SPOT_SECRET_KEY: ${{ secrets.SPOT_SECRET_KEY }}
            FUTURES_API_KEY: ${{ secrets.FUTURES_API_KEY }}
            FUTURES_SECRET_KEY: ${{ secrets.FUTURES_SECRET_KEY }}
            FUTURES_SANDBOX_KEY: ${{ secrets.FUTURES_SANDBOX_KEY }}
            FUTURES_SANDBOX_SECRET: ${{ secrets.FUTURES_SANDBOX_SECRET }}
        run: |
          pip install pytest pytest-cov
          pytest --cov --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          env_vars: OS,PYTHON
          fail_ci_if_error: true
          flags: unittests
          name: codecov-umbrella
          verbose: true

# todo: create new tag, release and upload to pypi when master
